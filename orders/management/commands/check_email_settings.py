"""
Management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ email.
"""

from django.core.management.base import BaseCommand
from django.conf import settings
from django.core.mail import send_mail
from django.template.loader import render_to_string
import os


class Command(BaseCommand):
    help = '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ email –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ'

    def add_arguments(self, parser):
        parser.add_argument(
            '--test-email',
            type=str,
            help='Email –∞–¥—Ä–µ—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∏—Å—å–º–∞',
        )
        parser.add_argument(
            '--send-test',
            action='store_true',
            help='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ',
        )

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('=== –ü–†–û–í–ï–†–ö–ê –ù–ê–°–¢–†–û–ï–ö EMAIL ==='))
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.show_email_settings()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.show_env_variables()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
        if options.get('send_test') and options.get('test_email'):
            self.send_test_email(options['test_email'])
    
    def show_email_settings(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Django email"""
        self.stdout.write('\nüìß Django Email Settings:')
        self.stdout.write(f'  EMAIL_BACKEND: {settings.EMAIL_BACKEND}')
        self.stdout.write(f'  EMAIL_HOST: {settings.EMAIL_HOST}')
        self.stdout.write(f'  EMAIL_PORT: {settings.EMAIL_PORT}')
        self.stdout.write(f'  EMAIL_USE_TLS: {settings.EMAIL_USE_TLS}')
        self.stdout.write(f'  EMAIL_HOST_USER: {settings.EMAIL_HOST_USER}')
        self.stdout.write(f'  EMAIL_HOST_PASSWORD: {"*" * len(settings.EMAIL_HOST_PASSWORD) if settings.EMAIL_HOST_PASSWORD else "–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù"}')
        self.stdout.write(f'  DEFAULT_FROM_EMAIL: {settings.DEFAULT_FROM_EMAIL}')
        
        if hasattr(settings, 'EMAIL_CHARSET'):
            self.stdout.write(f'  EMAIL_CHARSET: {settings.EMAIL_CHARSET}')
        if hasattr(settings, 'BASE_URL'):
            self.stdout.write(f'  BASE_URL: {settings.BASE_URL}')
    
    def show_env_variables(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å email"""
        self.stdout.write('\nüîß Environment Variables:')
        
        email_vars = [
            'EMAIL_BACKEND',
            'EMAIL_HOST', 
            'EMAIL_PORT',
            'EMAIL_USE_TLS',
            'EMAIL_HOST_USER',
            'EMAIL_HOST_PASSWORD',
            'DEFAULT_FROM_EMAIL',
            'EMAIL_CHARSET',
            'BASE_URL'
        ]
        
        for var in email_vars:
            value = os.environ.get(var, '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê')
            if 'PASSWORD' in var and value != '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê':
                value = '*' * len(value)
            self.stdout.write(f'  {var}: {value}')
    
    def send_test_email(self, email):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ"""
        self.stdout.write(f'\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∏—Å—å–º–∞ –Ω–∞ {email}...')
        
        try:
            # –ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ
            send_mail(
                subject='XXL OrderHub - –¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ email',
                message=f'''
–¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ email.

–ù–∞—Å—Ç—Ä–æ–π–∫–∏:
- EMAIL_BACKEND: {settings.EMAIL_BACKEND}
- EMAIL_HOST: {settings.EMAIL_HOST}
- EMAIL_PORT: {settings.EMAIL_PORT}
- EMAIL_USE_TLS: {settings.EMAIL_USE_TLS}
- EMAIL_HOST_USER: {settings.EMAIL_HOST_USER}
- DEFAULT_FROM_EMAIL: {settings.DEFAULT_FROM_EMAIL}

–ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ –ø–∏—Å—å–º–æ, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ email —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!
                ''',
                from_email=settings.DEFAULT_FROM_EMAIL,
                recipient_list=[email],
                fail_silently=False,
            )
            
            self.stdout.write(
                self.style.SUCCESS(f'‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {email}')
            )
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞: {str(e)}')
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
            import traceback
            self.stdout.write(f'–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n{traceback.format_exc()}')
    
    def check_email_backend(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–π email backend"""
        self.stdout.write('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ email backend:')
        
        try:
            from orders.email_backend import UTF8EmailBackend
            self.stdout.write('  ‚úÖ UTF8EmailBackend –Ω–∞–π–¥–µ–Ω')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ backend –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è
            backend = UTF8EmailBackend()
            self.stdout.write('  ‚úÖ UTF8EmailBackend —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
            
        except ImportError as e:
            self.stdout.write(f'  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ UTF8EmailBackend: {e}')
        except Exception as e:
            self.stdout.write(f'  ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UTF8EmailBackend: {e}')
