from django.core.management.base import BaseCommand
from django.conf import settings
import os
import subprocess


class Command(BaseCommand):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤.
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
    - –ù–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    - –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
    - –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
    """
    
    help = '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏ –∏—Ö –∫–æ–º–ø–∏–ª—è—Ü–∏—é'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--compile',
            action='store_true',
            help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã',
        )
        parser.add_argument(
            '--update',
            action='store_true',
            help='–û–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤',
        )
        parser.add_argument(
            '--locale',
            type=str,
            help='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —è–∑—ã–∫ (ru, de)',
        )
    
    def handle(self, *args, **options):
        if options['update']:
            self.update_translations()
        elif options['compile']:
            self.compile_translations()
        else:
            self.check_translations(options.get('locale'))
    
    def check_translations(self, locale=None):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–≤–æ–¥–æ–≤."""
        self.stdout.write(
            self.style.SUCCESS('üåç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤...')
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.stdout.write(f"  üìã –Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {settings.LANGUAGE_CODE}")
        self.stdout.write(f"  üåê –ü–æ–¥–¥–µ—Ä–∂–∫–∞ i18n: {settings.USE_I18N}")
        self.stdout.write(f"  üìÅ –ü—É—Ç—å –∫ –ø–µ—Ä–µ–≤–æ–¥–∞–º: {settings.LOCALE_PATHS}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏
        if hasattr(settings, 'LANGUAGES'):
            self.stdout.write(f"  üó£Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏: {[lang[0] for lang in settings.LANGUAGES]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        locale_path = settings.LOCALE_PATHS[0] if settings.LOCALE_PATHS else 'locale'
        
        if not os.path.exists(locale_path):
            self.stdout.write(
                self.style.ERROR(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {locale_path}")
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —è–∑—ã–∫
        languages = [locale] if locale else [lang[0] for lang in settings.LANGUAGES]
        
        for lang in languages:
            self.check_language_status(locale_path, lang)
    
    def check_language_status(self, locale_path, lang):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —è–∑—ã–∫–∞."""
        lang_path = os.path.join(locale_path, lang, 'LC_MESSAGES')
        
        if not os.path.exists(lang_path):
            self.stdout.write(
                self.style.WARNING(f"  ‚ö†Ô∏è –Ø–∑—ã–∫ {lang}: –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            )
            return
        
        po_file = os.path.join(lang_path, 'django.po')
        mo_file = os.path.join(lang_path, 'django.mo')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º .po —Ñ–∞–π–ª
        if os.path.exists(po_file):
            po_size = os.path.getsize(po_file)
            po_count = self.count_translations(po_file)
            self.stdout.write(f"  üìù {lang}: {po_count} —Å—Ç—Ä–æ–∫, {po_size} –±–∞–π—Ç")
        else:
            self.stdout.write(
                self.style.ERROR(f"  ‚ùå {lang}: —Ñ–∞–π–ª .po –Ω–µ –Ω–∞–π–¥–µ–Ω")
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º .mo —Ñ–∞–π–ª
        if os.path.exists(mo_file):
            mo_size = os.path.getsize(mo_file)
            mo_mtime = os.path.getmtime(mo_file)
            po_mtime = os.path.getmtime(po_file) if os.path.exists(po_file) else 0
            
            if mo_mtime > po_mtime:
                self.stdout.write(f"  ‚úÖ {lang}: .mo —Ñ–∞–π–ª –∞–∫—Ç—É–∞–ª–µ–Ω ({mo_size} –±–∞–π—Ç)")
            else:
                self.stdout.write(
                    self.style.WARNING(f"  ‚ö†Ô∏è {lang}: .mo —Ñ–∞–π–ª —É—Å—Ç–∞—Ä–µ–ª, –Ω—É–∂–Ω–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏—è")
                )
        else:
            self.stdout.write(
                self.style.WARNING(f"  ‚ö†Ô∏è {lang}: —Ñ–∞–π–ª .mo –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω—É–∂–Ω–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏—è")
            )
    
    def count_translations(self, po_file):
        """–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ .po —Ñ–∞–π–ª–µ."""
        try:
            with open(po_file, 'r', encoding='utf-8') as f:
                content = f.read()
                return content.count('msgid "')
        except Exception as e:
            self.stdout.write(f"    –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            return 0
    
    def update_translations(self):
        """–û–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤."""
        self.stdout.write(
            self.style.SUCCESS('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–æ–≤...')
        )
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤
            result = subprocess.run(
                ['python', 'manage.py', 'makemessages', '--all'],
                capture_output=True,
                text=True
            )
            
            if result.returncode == 0:
                self.stdout.write(
                    self.style.SUCCESS('‚úÖ –§–∞–π–ª—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!')
                )
                self.stdout.write(result.stdout)
            else:
                self.stdout.write(
                    self.style.ERROR('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤:')
                )
                self.stdout.write(result.stderr)
                
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞: {e}')
            )
    
    def compile_translations(self):
        """–°–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã."""
        self.stdout.write(
            self.style.SUCCESS('üîß –ö–æ–º–ø–∏–ª—è—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤...')
        )
        
        try:
            result = subprocess.run(
                ['python', 'manage.py', 'compilemessages'],
                capture_output=True,
                text=True
            )
            
            if result.returncode == 0:
                self.stdout.write(
                    self.style.SUCCESS('‚úÖ –ü–µ—Ä–µ–≤–æ–¥—ã —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω—ã!')
                )
                self.stdout.write(result.stdout)
            else:
                self.stdout.write(
                    self.style.ERROR('‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏:')
                )
                self.stdout.write(result.stderr)
                
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞: {e}')
            )
