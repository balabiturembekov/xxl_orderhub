from django.core.management.base import BaseCommand
from django.db import transaction
from orders.models import Country, Factory


class Command(BaseCommand):
    help = '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: –æ—á–∏—Å—Ç–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π'

    def add_arguments(self, parser):
        parser.add_argument(
            '--clear',
            action='store_true',
            help='–û—á–∏—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π'
        )

    def handle(self, *args, **options):
        clear_existing = options['clear']
        
        if clear_existing:
            self.stdout.write('–û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...')
            Factory.objects.all().delete()
            Country.objects.all().delete()
            self.stdout.write(
                self.style.SUCCESS('‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã')
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
        if Country.objects.count() > 0 or Factory.objects.count() > 0:
            self.stdout.write(
                self.style.WARNING(
                    '‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --clear –¥–ª—è –æ—á–∏—Å—Ç–∫–∏.'
                )
            )
            return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞
        import json
        import os
        
        json_file = 'manufacturer_fixture.json'
        if not os.path.exists(json_file):
            self.stdout.write(
                self.style.ERROR(f'–§–∞–π–ª {json_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!')
            )
            return
        
        with open(json_file, 'r', encoding='utf-8') as f:
            manufacturers_data = json.load(f)
        
        self.stdout.write(f'–ù–∞–π–¥–µ–Ω–æ {len(manufacturers_data)} –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π')
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω—ã –∏ —Ñ–∞–±—Ä–∏–∫–∏
        countries_created = set()
        factories_created = 0
        
        with transaction.atomic():
            for i, manufacturer_data in enumerate(manufacturers_data):
                try:
                    fields = manufacturer_data['fields']
                    name = fields['name']
                    email = fields['email_address']
                    phone = fields.get('phone_number', '')
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–∞–Ω—É –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
                    country_code = self.extract_country_code(name)
                    country_name = self.get_country_name(country_code)
                    
                    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω—É
                    country, country_created = Country.objects.get_or_create(
                        code=country_code,
                        defaults={'name': country_name}
                    )
                    
                    if country_created:
                        countries_created.add(country_name)
                    
                    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É
                    factory, factory_created = Factory.objects.get_or_create(
                        name=name,
                        defaults={
                            'country': country,
                            'email': email,
                            'phone': phone,
                            'contact_person': '',
                            'address': ''
                        }
                    )
                    
                    if factory_created:
                        factories_created += 1
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                    if (i + 1) % 50 == 0:
                        self.stdout.write(f'–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i + 1}/{len(manufacturers_data)}...')
                    
                except Exception as e:
                    self.stdout.write(
                        self.style.WARNING(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {name}: {str(e)}')
                    )
                    continue
        
        self.stdout.write(
            self.style.SUCCESS(
                f'‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n'
                f'üìä –°–æ–∑–¥–∞–Ω–æ —Å—Ç—Ä–∞–Ω: {len(countries_created)}\n'
                f'üè≠ –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–±—Ä–∏–∫: {factories_created}'
            )
        )
        
        # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω
        if countries_created:
            self.stdout.write('\nüåç –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã:')
            for country in sorted(countries_created):
                self.stdout.write(f'  - {country}')
    
    def extract_country_code(self, name):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–±—Ä–∏–∫–∏"""
        if '(' in name and ')' in name:
            parts = name.split('(')
            if len(parts) > 1:
                country_part = parts[-1].rstrip(')')
                country_code = country_part.split()[0]
                country_code = country_code.strip(')').strip()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–¥ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
                if len(country_code) <= 3:
                    return country_code
        
        return "UNKNOWN"
    
    def get_country_name(self, country_code):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ –∫–æ–¥—É"""
        country_names = {
            'IT': '–ò—Ç–∞–ª–∏—è',
            'TR': '–¢—É—Ä—Ü–∏—è',
            'DE': '–ì–µ—Ä–º–∞–Ω–∏—è',
            'FR': '–§—Ä–∞–Ω—Ü–∏—è',
            'ES': '–ò—Å–ø–∞–Ω–∏—è',
            'PL': '–ü–æ–ª—å—à–∞',
            'RO': '–†—É–º—ã–Ω–∏—è',
            'BG': '–ë–æ–ª–≥–∞—Ä–∏—è',
            'HU': '–í–µ–Ω–≥—Ä–∏—è',
            'CZ': '–ß–µ—Ö–∏—è',
            'SK': '–°–ª–æ–≤–∞–∫–∏—è',
            'HR': '–•–æ—Ä–≤–∞—Ç–∏—è',
            'SI': '–°–ª–æ–≤–µ–Ω–∏—è',
            'AT': '–ê–≤—Å—Ç—Ä–∏—è',
            'CH': '–®–≤–µ–π—Ü–∞—Ä–∏—è',
            'NL': '–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã',
            'BE': '–ë–µ–ª—å–≥–∏—è',
            'DK': '–î–∞–Ω–∏—è',
            'SE': '–®–≤–µ—Ü–∏—è',
            'NO': '–ù–æ—Ä–≤–µ–≥–∏—è',
            'FI': '–§–∏–Ω–ª—è–Ω–¥–∏—è',
            'PT': '–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è',
            'GR': '–ì—Ä–µ—Ü–∏—è',
            'CY': '–ö–∏–ø—Ä',
            'MT': '–ú–∞–ª—å—Ç–∞',
            'IE': '–ò—Ä–ª–∞–Ω–¥–∏—è',
            'LU': '–õ—é–∫—Å–µ–º–±—É—Ä–≥',
            'EE': '–≠—Å—Ç–æ–Ω–∏—è',
            'LV': '–õ–∞—Ç–≤–∏—è',
            'LT': '–õ–∏—Ç–≤–∞',
            'UNKNOWN': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞'
        }
        
        return country_names.get(country_code, f'–°—Ç—Ä–∞–Ω–∞ {country_code}')
