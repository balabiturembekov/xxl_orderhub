from django.core.management.base import BaseCommand
from django.core.cache import cache
from orders.models import Order, Factory, Country


class Command(BaseCommand):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã.
    
    –û—á–∏—â–∞–µ—Ç –∫—ç—à —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ.
    –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –∫—ç—à–∞.
    """
    
    help = '–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã –∏ –æ—á–∏—â–∞–µ—Ç –∫—ç—à'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--show',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞',
        )
        parser.add_argument(
            '--force',
            action='store_true',
            help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à',
        )
    
    def handle(self, *args, **options):
        if options['show']:
            self.show_statistics()
        elif options['force']:
            self.force_update_statistics()
        else:
            self.update_statistics()
    
    def show_statistics(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
        self.stdout.write(
            self.style.SUCCESS('üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:')
        )
        
        stats = self._get_fresh_statistics()
        
        self.stdout.write(f"  üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {stats['total_orders']}")
        self.stdout.write(f"  üè≠ –í—Å–µ–≥–æ —Ñ–∞–±—Ä–∏–∫: {stats['total_factories']}")
        self.stdout.write(f"  üåç –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω: {stats['total_countries']}")
        self.stdout.write(f"  üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['active_users']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cached_stats = cache.get('public_statistics')
        if cached_stats:
            self.stdout.write(
                self.style.WARNING('\nüíæ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∞')
            )
        else:
            self.stdout.write(
                self.style.WARNING('\nüíæ –ö—ç—à –ø—É—Å—Ç')
            )
    
    def update_statistics(self):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à)."""
        self.stdout.write(
            self.style.SUCCESS('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã...')
        )
        
        # –û—á–∏—â–∞–µ–º –∫—ç—à
        cache.delete('public_statistics')
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
        stats = self._get_fresh_statistics()
        
        self.stdout.write(
            self.style.SUCCESS('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!')
        )
        self.stdout.write(f"  üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {stats['total_orders']}")
        self.stdout.write(f"  üè≠ –í—Å–µ–≥–æ —Ñ–∞–±—Ä–∏–∫: {stats['total_factories']}")
        self.stdout.write(f"  üåç –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω: {stats['total_countries']}")
        self.stdout.write(f"  üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['active_users']}")
        
        self.stdout.write(
            self.style.SUCCESS('\nüí° –ö—ç—à –æ—á–∏—â–µ–Ω. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—Ä–æ—Å–µ.')
        )
    
    def force_update_statistics(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        self.stdout.write(
            self.style.SUCCESS('üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...')
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
        stats = self._get_fresh_statistics()
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        cache.set('public_statistics', stats, 600)  # 10 –º–∏–Ω—É—Ç
        
        self.stdout.write(
            self.style.SUCCESS('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!')
        )
        self.stdout.write(f"  üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {stats['total_orders']}")
        self.stdout.write(f"  üè≠ –í—Å–µ–≥–æ —Ñ–∞–±—Ä–∏–∫: {stats['total_factories']}")
        self.stdout.write(f"  üåç –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω: {stats['total_countries']}")
        self.stdout.write(f"  üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['active_users']}")
        
        self.stdout.write(
            self.style.SUCCESS('\nüíæ –ö—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω –∏ –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç.')
        )
    
    def _get_fresh_statistics(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        return {
            'total_orders': Order.objects.count(),
            'total_factories': Factory.objects.count(),
            'total_countries': Country.objects.count(),
            'active_users': Order.objects.values('employee').distinct().count(),
        }
